openapi: '3.1.0'
info:
  version: '0.0.1'
  title: 'Omura API'
  description: NFT Exchange on Cardano
servers:
  - url: https://omura.tenancio.com

paths:
  /pools:
    parameters:
      - name: page
        description: Requests a specific page, if not defined, the first page will be returned by default
        in: query
        required: false
        schema:
          type: integer
      - name: sort
        description: Sort by a specific column in ascending or descending order
        in: query
        required: false
        schema:
          type: string
          example: "Culture,asc"
      - name: category
        description: Filters returned results by category
        in: query
        required: false
        schema:
          type: string
      - name: search
        description: Searches for a specific word or phrase
        in: query
        required: false
        schema:
          type: string
    get:
      summary: Get a list of pools available on Omura
      tags:
        - Pools
      responses:
        200:
          description: A list of pools available on Omura
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pools'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pools/popular:
    get:
      summary: Get a list of popular pools on Omura
      tags:
        - Pools
      responses:
        200:
          description: A list of popular pools on Omura
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pools'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pools/{poolid}/details:
    parameters:
      - name: poolid
        description: The pool id to find
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the details of a specific pool
      tags:
        - Pools
      responses:
        200:
          description: The details of a specific pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        404:
          description: Unable to find requested pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pools/{poolid}/price:
    parameters:
      - name: poolid
        description: The pool id to find
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the price of a specific pool
      tags:
        - Pools
      responses:
        200:
          description: The price of a specific pool
          content:
            application/json:
              schema:
                type: integer
        404:
          description: Unable to find requested pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/pkh/{pkh}:
    parameters:
      - name: pkh
        description: The user public key hash to find
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the id of a user
      tags:
        - Users
      responses:
        200:
          description: The id of a user
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_id
                properties:
                  user_id:
                    type: string
        404:
          description: Unable to find requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/username/{username}:
    parameters:
      - name: username
        description: The username to find
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the id of a user
      tags:
        - Users
      responses:
        200:
          description: The id of a user
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_id
                properties:
                  user_id:
                    type: string
        404:
          description: Unable to find requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notifications/{userid}:
    parameters:
      - name: userid
        description: The userid to get notifications for
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the notifications of a user
      tags:
        - Users
      responses:
        200:
          description: The notifications of a user
          content:
            application/json:
              schema:
                type: object
                required:
                  - notifications
                properties:
                  notifications:
                    $ref: '#/components/schemas/Notifications'
        404:
          description: Unable to find requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/create:
    parameters:
      - name: username
        description: The username to use when creating the user
        in: query
        required: false
        schema:
          type: string
      - name: email
        description: The email to use when creating the user
        in: query
        required: false
        schema:
          type: string
      - name: pkh
        description: The pkh to use when creating the user
        in: query
        required: true
        schema:
          type: string
    post:
      summary: Create a user
      tags:
        - Users
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/config:
    get:
      summary: get the Omura exchange configuration
      tags: Exchange
      responses:
        200:
          description: Omura exchange configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeConfig'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/symbols:
    get:
      summary: get symbols on the Omura exchange
      tags:
        - Exchange
      responses:
        200:
          description: Symbols on the Omura exchange
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Symbols'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/bars/{symbol}:
    parameters:
      - name: symbol
        description: The symbol to get data for
        in: path
        required: true
        schema:
          type: string
      - name: from
        description: The starting timestamp to retrieve data from
        in: query
        required: true
        schema:
          type: integer
      - name: to
        description: The ending timestamp to retrieve data to
        in: query
        required: true
        schema:
          type: integer
      - name: countBack
        description: The number of bars to retrieve
        in: query
        required: true
        schema:
          type: integer
    get:
      summary: Get bar data for a symbol on the Omura exchange
      tags:
        - Exchange
      responses:
        200:
          description: Bar data for a symbol on the Omura exchange
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bars'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Pools:
      type: array
      items:
        $ref: '#/components/schemas/Pool'
    Pool:
      type: object
      required:
        - id
        - img
        - category
        - project_name
        - seven_day_price_change
        - created_at
        - lp_fee
        - seven_day_volume_change
        - symbol
        - token_liquidity
        - verified
        - project_name_lower
        - market_cap
        - day_volume
        - day_price_change
        - total_lps
        - seven_day_volume
        - ada_liquidity
        - trading_fees_apr
        - day_volume_change
        - price
        - market_cap_usd
      properties:
        id:
          type: string
        img:
          type: string
        category:
          type: string
        project_name:
          type: string
        seven_day_price_change:
          type: number
        created_at:
          type: integer
        lp_fee:
          type: number
        seven_day_volume_change:
          type: number
        symbol:
          type: string
        token_liquidity:
          type: integer
        verified:
          type: boolean
        project_name_lower:
          type: string
        market_cap:
          type: number
        day_volume:
          type: number
        day_price_change:
          type: number
        total_lps:
          type: integer
        seven_day_volume:
          type: number
        ada_liquidity:
          type: number
        trading_fees_apr:
          type: number
        day_volume_change:
          type: number
        price:
          type: number
        market_cap_usd:
          type: number
    Notifications:
      type: array
      items:
        $ref: '#/components/schemas/Notification'
    Notification:
      type: object
      required:
        - user_id
        - notification_id
        - notification_type
        - quantity
        - ticker
        - txid
      properties:
        user_id:
          type: string
        notification_id:
          type: string
        notification_type:
          type: string
        quantity:
          type: number
        ticker:
          type: string
        txid:
          type: string
    User:
      type: object
      required:
        - id
        - pkh
        - username
        - email
        - image
        - xp
      properties:
        id:
          type: string
        pkh:
          type: string
        username:
          type: string
        email:
          type: string
        image:
          type: string
        xp:
          type: integer
    Symbols:
      type: array
      items:
        $ref: '#/components/schemas/Symbol'
    Symbol:
      type: object
      required:
        - symbol
        - full_name
        - description
        - exchange
        - ticker
        - type
      properties:
        symbol:
          type: string
        full_name:
          type: string
        description:
          type: string
        exchange:
          type: string
        ticker:
          type: string
        type:
          type: string
    Bars:
      type: array
      items:
        $ref: '#/components/schemas/Bar'
    Bar:
      type: object
      required:
        - open
        - high
        - low
        - close
        - time
      properties:
        open:
          type: number
        high:
          type: number
        low:
          type: number
        close:
          type: number
        time:
          type: integer
    ExchangeConfig:
      type: object
      required:
        - supported_resolutions
        - exchanges
        - symbols_types
      properties:
        supported_resolutions:
          type: string
        exchanges:
          type: array
          items:
            $ref: '#/components/schemas/Exchange'
        symbols_types:
          type: array
          items:
            $ref: '#/components/schemas/SymbolType'
    Exchange:
      type: object
      required:
        - value
        - name
        - desc
      properties:
        value:
          type: string
        name:
          type: string
        desc:
          type: string
    SymbolType:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          type: string
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
