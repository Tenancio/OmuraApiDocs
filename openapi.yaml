openapi: '3.1.0'
info:
  version: '0.0.1'
  title: 'Omura API'
  description: NFT Exchange on Cardano
servers:
  - url: https://omura.tenancio.com
tags:
  - name: Pools
    description: "Pool Operations"
  - name: Users
    description: "User Operations"
  - name: Exchange
    description: "Exchange Operations"
  - name: Liquidity
    description: "Liquidity Operations"
  - name: Tx
    description: "Transaction operations"
paths:
  /pools:
    parameters:
      - name: page
        description: Requests a specific page, if not defined, the first page will be returned by default
        in: query
        required: false
        schema:
          type: integer
      - name: sort
        description: Sort by a specific column in ascending or descending order
        in: query
        required: false
        schema:
          type: string
          example: "day_volume,asc"
      - name: category
        description: Filters returned results by category
        in: query
        required: false
        schema:
          type: string
      - name: search
        description: Searches for a specific word or phrase
        in: query
        required: false
        schema:
          type: string
    get:
      summary: Get a list of pools available on Omura
      tags:
        - Pools
      responses:
        200:
          description: A list of pools available on Omura
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pools'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pools/popular:
    get:
      summary: Get a list of popular pools on Omura
      tags:
        - Pools
      responses:
        200:
          description: A list of popular pools on Omura
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pools'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pools/{poolid}/details:
    parameters:
      - name: poolid
        description: The pool id to find
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the details of a specific pool
      tags:
        - Pools
      responses:
        200:
          description: The details of a specific pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        404:
          description: Unable to find requested pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{pkh}:
    parameters:
      - name: pkh
        description: The user public key hash to find
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the details of a user from a pkh (creates a user if they do not exist)
      tags:
        - Users
      responses:
        200:
          description: The details of a user
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_id
                properties:
                  user_id:
                    type: string
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{pkh}/liquidity:
    parameters:
      - name: pkh
        description: The user public key hash to retrieve liquidity for
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the liquidity position of a user
      tags:
        - Users
      responses:
        200:
          description: The liquidity positions of a user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - name
                    - symbol
                    - img
                    - pooled_ada
                    - pooled_tokens
                    - share
                    - lp_balance
                    - price
                    - price_usd
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    symbol:
                      type: string
                    img:
                      type: string
                    pooled_ada:
                      type: number
                    pooled_tokens:
                      type: number
                    share:
                      type: number
                    lp_balance:
                      type: number
                    price:
                      type: number
                    price_usd:
                      type: number
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{pkh}/transactions:
    parameters:
      - name: pkh
        description: The pkh of the user
        in: path
        required: true
        schema:
          type: string
      - name: page
        description: Page to return for pagination
        in: query
        required: false
        schema:
          type: integer
      - name: search
        description: Symbol to search for
        in: query
        required: false
        schema:
          type: string

    get:
      summary: Get a user's transactions
      tags:
        - Users
      responses:
        200:
          description: User transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
  /users/update:
    parameters:
      - name: id
        description: The ID of user to update
        in: body
        required: true
        schema:
          type: string
      - name: username
        description: The new username of the user
        in: body
        required: false
        schema:
          type: string
      - name: image
        description: The new display image of the user
        in: query
        required: false
        schema:
          type: string
    post:
      summary: Update a user
      tags:
        - Users
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/create:
    parameters:
      - name: pkh
        description: The pkh to use when creating the user
        in: body
        required: true
        schema:
          type: string
      - name: username
        description: The username to use when creating the user
        in: body
        required: false
        schema:
          type: string
      - name: email
        description: The email to use when creating the user
        in: body
        required: false
        schema:
          type: string
    post:
      summary: Create a user
      tags:
        - Users
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notifications/{pkh}:
    parameters:
      - name: pkh
        description: The pkh to get notifications for
        in: path
        required: true
        schema:
          type: string
      - name: page
        description: the page to get
        in: query
        required: false
        schema:
          type: number
    get:
      summary: Get the notifications of a user
      tags:
        - Users
      responses:
        200:
          description: The notifications of a user
          content:
            application/json:
              schema:
                type: object
                required:
                  - notifications
                  - amount
                properties:
                  notifications:
                    $ref: '#/components/schemas/Notifications'
                  amount:
                    type: number
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/config:
    get:
      summary: get the Omura exchange configuration
      tags: 
        - Exchange
      responses:
        200:
          description: Omura exchange configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeConfig'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/symbols:
    get:
      summary: get symbols on the Omura exchange
      tags:
        - Exchange
      responses:
        200:
          description: Symbols on the Omura exchange
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Symbols'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/bars/{symbol}:
    parameters:
      - name: symbol
        description: The symbol to get data for
        in: path
        required: true
        schema:
          type: string
      - name: from
        description: The starting timestamp to retrieve data from
        in: query
        required: true
        schema:
          type: integer
      - name: to
        description: The ending timestamp to retrieve data to
        in: query
        required: true
        schema:
          type: integer
      - name: countBack
        description: The number of bars to retrieve
        in: query
        required: true
        schema:
          type: integer
    get:
      summary: Get bar data for a symbol on the Omura exchange
      tags:
        - Exchange
      responses:
        200:
          description: Bar data for a symbol on the Omura exchange
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bars'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/transactions/{symbol}:
    parameters:
      - name: symbol
        description: The symbol to retrieve transactions for
        in: path
        required: true
        schema:
          type: string
      - name: page
        description: page number for pagination
        in: query
        required: false
        schema:
          type: integer
    get:
      summary: Get transactions for a specific pool
      tags:
        - Exchange
      responses:
        200:
          description: Transaction logs for the pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /availableTokenDepositAssets:
    parameters:   
      - name: symbol
        description: The symbol of the pool to deposit into.
        in: query
        required: true
        schema:
          type: string
      - name: pkh
        description: The user's public key hash
        in: query
        required: true
        schema:
          type: string
    get:
      summary: Get the available tokens to deposit
      tags:
        - Exchange
      responses:
        200:
          description: The available assets
          content: 
            application/json:
              schema:
                type: object
                required:
                  - assets
                properties:
                  assets:
                    type: object
                    required:
                      - <asset>
                    properties: 
                      <asset>:
                        type: number
  /buildTokenDeposit:
    post:
      summary: Build a transaction for depositing tokens to receive FPT
      tags:
        - Tx
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token_policy
                - symbol
                - lock_assets
              properties:
                token_policy:
                  description: The policy of the token being locked
                  type: string
                symbol:
                  description: The symbol of the project
                  type: string
                lock_assets:
                  description: The assets being locked
                  type: array
                  items:
                    type: object
                    required:
                      - <asset>
                    properties:
                      <asset>:
                        type: number
      responses:
        200:
          description: An Unsigned Transaction
          content:
            application/json:
              schema:
                type: object
                required:
                  - tx
                properties:
                  tx:
                    type: string
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /buildTokenWithdraw:
    post:
      summary: Build a transaction for withdrawing tokens using FPT
      tags:
        - Tx
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token_policy
                - symbol
                - unlock_assets
              properties:
                token_policy:
                  description: The policy of the tokens being unlocked
                  type: string
                symbol:
                  description: The symbol of the project
                  type: string
                unlock_assets:
                  description: The assets being unlocked
                  type: array
                  items:
                    type: object
                    required:
                      - <asset>
                    properties:
                      <asset>:
                        type: number
      responses:
        200:
          description: An Unsigned Transaction
          content:
            application/json:
              schema:
                type: object
                required:
                  - tx
                properties:
                  tx:
                    type: string
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /buildLiquidityDeposit:
    post:
      summary: Create a transaction to deposit tokens to a liquidity pool
      tags: 
        - Liquidity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - symbol
                - ada
                - token_amount
                - pkh
              properties:
                symbol:
                  description: The pool symbol
                  type: string
                ada:
                  description: The amount of ada being deposited
                  type: number
                token_amount:
                  description: The amount of tokens to be deposited
                  type: number
                pkh:
                  description: The user's public key hash
                  type: string
      responses:
        200:
          description: An unsigned transaction
          content:
            application/json:
              schema:
                type: object
                required: 
                  - tx
                properties:
                  tx:
                    type: string
        404:
          description: Pool not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /buildLiquidityWithdraw:
    parameters:
      - name: symbol
        description: The pool symbol
        in: body
        required: true
        schema:
          type: string
      - name: lp_amount
        description: the amount of lp tokens to be exchanged
        in: body
        required: true
        schema:
          type: number
      - name: pkh
        description: The user's public key hash
        in: body
        required: true
        schema:
          type: string
    post:
      summary: Create a transaction to deposit tokens to a liquidity pool
      tags: 
        - Liquidity
      responses:
        200:
          description: An unsigned transaction
          content:
            application/json:
              schema:
                type: object
                required: 
                  - tx
                properties:
                  tx:
                    type: string
        404:
          description: Pool not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /submit:
    parameters:
      - name: type
        description: The type of transaction
        in: body
        required: true
        schema:
          type: string
      - name: tx
        description: The transaction body
        in: body
        required: true
        schema:
          type: string
      - name: witness
        description: The transaction witness
        in: body
        required: true
        schema:
          type: string
      - name: pkh
        description: The user's pkh
        in: body
        required: true
        schema:
          type: string
    post:
      summary: Sumbit a transaction to the blockchain
      tags:
        - Tx
      responses:
        200:
          description: A Tx Hash
          content:
            application/json:
              schema:
                type: object
                required:
                  - txHash
                properties:
                  txHash:
                    type: string
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Pools:
      type: array
      items:
        $ref: '#/components/schemas/Pool'
    Pool:
      type: object
      required:
        - id
        - img
        - category
        - project_name
        - seven_day_price_change
        - created_at
        - lp_fee
        - seven_day_volume_change
        - symbol
        - token_liquidity
        - verified
        - project_name_lower
        - market_cap
        - day_volume
        - day_price_change
        - total_lps
        - seven_day_volume
        - ada_liquidity
        - trading_fees_apr
        - day_volume_change
        - price
        - market_cap_usd
      properties:
        id:
          type: string
        img:
          type: string
        category:
          type: string
        project_name:
          type: string
        seven_day_price_change:
          type: number
        created_at:
          type: integer
        lp_fee:
          type: number
        seven_day_volume_change:
          type: number
        symbol:
          type: string
        token_liquidity:
          type: integer
        verified:
          type: boolean
        project_name_lower:
          type: string
        market_cap:
          type: number
        day_volume:
          type: number
        day_price_change:
          type: number
        total_lps:
          type: integer
        seven_day_volume:
          type: number
        ada_liquidity:
          type: number
        trading_fees_apr:
          type: number
        day_volume_change:
          type: number
        price:
          type: number
        market_cap_usd:
          type: number
    Notifications:
      type: array
      items:
        $ref: '#/components/schemas/Notification'
    Notification:
      type: object
      required:
        - id
        - pkh
        - type
        - timestamp
      optional:
        - amount
        - feature_name
        - message
        - project_name
        - symbol
      properties:
        id:
          type: string
        pkh:
          type: string
        type:
          type: string
        timestamp:
          type: number
        amount:
          type: number
        feature_name:
          type: string
        message:
          type: string
        project_name:
          type: string
        symbol:
          type: string        
    User:
      type: object
      required:
        - id
        - pkh
        - username
        - email
        - image
        - xp
      properties:
        id:
          type: string
        pkh:
          type: string
        username:
          type: string
        email:
          type: string
        image:
          type: string
        xp:
          type: integer
    Symbols:
      type: array
      items:
        $ref: '#/components/schemas/Symbol'
    Symbol:
      type: object
      required:
        - id
        - project_name
        - img
        - symbol
        - category
        - price
        - day_price_change
        - day_price_change_amount
        - day_volume
        - token_liquidity
        - price_usd
      properties:
        id:
          type: string
        project_name:
          type: string
        img:
          type: string
        symbol:
          type: string
        category:
          type: string
        price:
          type: number
        day_price_change:
          type: number
        day_price_change_amount:
          type: number
        day_volume:
          type: number
        token_liquidity:
          type: number
        price_usd:
          type: number
    Bars:
      type: array
      items:
        $ref: '#/components/schemas/Bar'
    Bar:
      type: object
      required:
        - open
        - high
        - low
        - close
        - time
      properties:
        open:
          type: number
        high:
          type: number
        low:
          type: number
        close:
          type: number
        time:
          type: integer
    ExchangeConfig:
      type: object
      required:
        - supported_resolutions
        - exchanges
        - symbols_types
      properties:
        supported_resolutions:
          type: string
        exchanges:
          type: array
          items:
            $ref: '#/components/schemas/Exchange'
        symbols_types:
          type: array
          items:
            $ref: '#/components/schemas/SymbolType'
    Exchange:
      type: object
      required:
        - value
        - name
        - desc
      properties:
        value:
          type: string
        name:
          type: string
        desc:
          type: string
    SymbolType:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          type: string
    Transactions:
      type: object
      required:
        - transactions
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    Transaction:
      type: object
      required:
        - id
        - pkh
        - status
        - symbol
        - event
        - price
        - input
        - output
        - timestamp
      properties:
        id:
          type: string
        pkh:
          type: string
        status:
          type: string
        symbol: 
          type: string
        event:
          type: string
        price:
          type: number
        input:
          type: number
        output:
          type: number
        timestamp:
          type: number
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
